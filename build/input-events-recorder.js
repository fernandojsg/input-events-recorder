(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.InputEventsRecorder = {})));
}(this, (function (exports) { 'use strict';

  function computeNormalizedPos(element, evt) {
    var rect = element.getBoundingClientRect();
    var x = evt.clientX - rect.left;
    var y = evt.clientY - rect.top;
    x /= element.clientWidth;
    y /= element.clientHeight;
    return [x, y];
  }
  class InputRecorder {
    constructor(element, options) {
      this.element = element;
      this.clear();
      this.options = options;
    }
    enable(forceReset) {
      this.initTime = performance.now();
      if (forceReset) {
        this.clear();
      }
      this.injectListeners();
    }
    clear() {
      this.frameNumber = 0;
      this.events = [];
    }
    addEvent(type, event, parameters) {
      var eventData = {
        type,
        event,
        parameters
      };
      if (this.options.useTime) {
        eventData.time = performance.now() - this.initTime;
      } else {
        eventData.frameNumber = this.frameNumber;
      }
      this.events.push(eventData);
      if (this.options.newEventCallback) {
        this.options.newEventCallback(eventData);
      }
    }
    injectListeners() {
      this.element.addEventListener("mousedown", evt => {
        var pos = computeNormalizedPos(this.element, evt);
        this.addEvent('mouse', 'down', {
          x: pos[0],
          y: pos[1],
          button: evt.button
        });
      });
      this.element.addEventListener("mouseup", evt => {
        var pos = computeNormalizedPos(this.element, evt);
        this.addEvent('mouse', 'up', {
          x: pos[0],
          y: pos[1],
          button: evt.button
        });
      });
      this.element.addEventListener("mousemove", evt => {
        var pos = computeNormalizedPos(this.element, evt);
        this.addEvent('mouse', 'move', {
          x: pos[0],
          y: pos[1],
          button: evt.button
        });
      });
      this.element.addEventListener("wheel", evt => {
        this.addEvent('mouse', 'wheel', {
          deltaX: evt.deltaX,
          deltaY: evt.deltaY,
          deltaZ: evt.deltaZ,
          deltaMode: evt.deltaMode
        });
      });
      window.addEventListener("keydown", evt => {
        this.addEvent('key', 'down', {
          keyCode: evt.keyCode,
          charCode: evt.charCode,
          key: evt.key
        });
      });
      window.addEventListener("keyup", evt => {
        this.addEvent('key', 'up', {
          keyCode: evt.keyCode,
          charCode: evt.charCode,
          key: evt.key
        });
      });
    }
  }

  function simulateKeyEvent(element, eventType, parameters) {
    var e = document.createEventObject ? document.createEventObject() : document.createEvent("Events");
    if (e.initEvent) {
      e.initEvent(eventType, true, true);
    }
    e.keyCode = parameters.keyCode;
    e.which = parameters.keyCode;
    e.charCode = parameters.charCode;
    e.programmatic = true;
    e.key = parameters.key;
    {
      element.dispatchEvent ? element.dispatchEvent(e) : element.fireEvent("on" + eventType, e);
    }
  }
  function simulateMouseEvent(element, eventType, parameters) {
    var x = parameters.x;
    var y = parameters.y;
    x *= element.clientWidth;
    y *= element.clientHeight;
    var rect = element.getBoundingClientRect();
    x = Math.round(rect.left + x);
    y = Math.round(rect.top + y);
    var e = document.createEvent("MouseEvents");
    e.initMouseEvent(eventType, true, true, window, eventType == 'mousemove' ? 0 : 1, x, y, x, y, 0, 0, 0, 0, parameters.button, null);
    e.programmatic = true;
    {
      element.dispatchEvent(e);
    }
  }
  class InputReplayer {
    constructor(element) {
      this.element = element;
      this.recording = recording2;
      this.currentIndex = 0;
    }
    tick(frameNumber) {
      if (this.currentIndex >= this.recording.length) {
        return;
      }
      if (this.recording[this.currentIndex].frameNumber > frameNumber) {
        return;
      }
      while (this.currentIndex < this.recording.length && this.recording[this.currentIndex].frameNumber === frameNumber) {
        const input = this.recording[this.currentIndex];
        switch (input.type) {
          case 'mouse':
            {
              simulateMouseEvent(this.element, input.type + input.event, input.parameters);
            }
            break;
          case 'key':
            {
              simulateKeyEvent(this.element, input.type + input.event, input.parameters);
            }
            break;
          default:
            {
              console.log('Still not implemented event', input.type);
            }
        }
        this.currentIndex++;
      }
    }
  }

  exports.InputRecorder = InputRecorder;
  exports.InputReplayer = InputReplayer;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
